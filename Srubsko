using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Text.RegularExpressions;
namespace Srubso
{
    class Program
    {
                const string pattern = @"([a-zA-Z]+\s){1,3}@([a-zA-Z0-9]+\s){1,3}[0-9]+\s[0-9]+";

        static void Main(string[] args)
        {
            string[] input = Console.ReadLine().Split();
            Dictionary<string, Dictionary<string, int>> singers = new Dictionary<string, Dictionary<string, int>>();
            while (input[0] != "End")
            {
                if (input.Length > 3 && input.Length <= 6 )
                {
                    int ticketsAmount = 0;
                    int ticketsPrice = 0;
                    var name = input[0];
                    var place = input[1];
                    if (place[0] != '@')
                    {
                        name = name + " " + place;
                        place = input[2];
                        if (input[3][0] >= '1' && input[3][0] <= '9')
                        {
                            ticketsPrice = int.Parse(input[3]);
                            ticketsAmount = int.Parse(input[4]);
                        }
                        else
                        {
                            place = place + " " + input[3];
                            ticketsPrice = int.Parse(input[4]);
                            ticketsAmount = int.Parse(input[5]);
                        }

                    }
                    else
                    {
                        place = input[1];
                        if (input[2][0] >= '1' && input[2][0] <= '9')
                        {
                            ticketsPrice = int.Parse(input[2]);
                            ticketsAmount = int.Parse(input[3]);
                        }
                        else
                        {
                            place = place + " " + input[2];
                            ticketsPrice = int.Parse(input[3]);
                            ticketsAmount = int.Parse(input[4]);
                        }
                    }

                    int money = ticketsPrice * ticketsAmount;

                    if (!singers.ContainsKey(place))
                    {
                        singers.Add(place, new Dictionary<string, int>());

                    }
                    if (!singers[place].ContainsKey(name))
                    {
                        singers[place].Add(name, money);
                    }
                    else
                    {
                        singers[place][name] = singers[place][name] + money;
                    }
                }
              
                input = Console.ReadLine().Split();
            }
            foreach (var item in singers)
            {
                string curort = item.Key.Substring(1);
                Console.WriteLine(curort);
                foreach (var singer in item.Value.OrderByDescending(x =>x.Value))
                {

                    Console.WriteLine("#  "+singer.Key + " -> "+singer.Value);
                }

            }
            
        }
    }
}
